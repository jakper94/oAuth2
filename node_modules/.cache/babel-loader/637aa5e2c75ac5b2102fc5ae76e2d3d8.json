{"ast":null,"code":"var _jsxFileName = \"/Users/jakobpersson/Documents/work/school/Teknik-for-sociala-medier/oAuth2/src/components/useDatabase/getFromDatabase.js\";\nimport React, { useState, useEffect } from 'react';\nimport firebase from '../../firebase-config';\nimport TimeStamp from 'react-timestamp';\n\nfunction addUser(uid, email, name, imgUrl) {\n  const date = new Date().getTime();\n  const timestamp = Math.floor(date / 1000);\n  firebase.firestore().collection('users').doc(uid).get().then(doc => {\n    //if user exist no new user is added to the database in firestore\n    if (doc.exists) {//if user not exist, the user id is set to the collection key in the database and  the timestamp and uid is saved\n    } else {\n      firebase.firestore().collection('users').doc(uid).set({\n        userID: uid,\n        email: email,\n        name: name,\n        imgUrl: imgUrl,\n        timestamp: timestamp\n      });\n    }\n  });\n} //the function gets the user information from firestore database \n\n\nfunction GetInfoFromUser(uid) {\n  const [users, setUsers] = useState([]);\n  useEffect(() => {\n    const unsubscribe = firebase.firestore().collection('users').where('userID', '==', uid).onSnapshot(snapshot => {\n      const newUsers = snapshot.docs.map(doc => ({\n        id: doc.id,\n        ...doc.data()\n      }));\n      setUsers(newUsers);\n    });\n    return () => unsubscribe();\n  }, []);\n  return users;\n}\n\nfunction updateUser(inputedUser) {\n  const date = new Date().getTime();\n  const timestamp = Math.floor(date / 1000); //updates the timestamp in the database  fCvwAqy3yo4kpxToCY0H' \n\n  firebase.firestore().collection('users').doc(inputedUser).update({\n    timestamp\n  });\n}\n\nconst GetFromDatabase = ({\n  userUid,\n  userEmail,\n  userName,\n  userImg\n}) => {\n  const [firstRender, setFirstRender] = useState(true);\n\n  if (firstRender) {\n    addUser(userUid, userEmail, userName, userImg);\n  }\n\n  const users = GetInfoFromUser(userUid);\n\n  if (firstRender) {\n    updateUser(userUid);\n    setFirstRender(false);\n  }\n\n  return /*#__PURE__*/React.createElement(\"div\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 78,\n      columnNumber: 7\n    }\n  }, users.map(user => /*#__PURE__*/React.createElement(\"div\", {\n    key: user.id,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 80,\n      columnNumber: 11\n    }\n  }, /*#__PURE__*/React.createElement(\"img\", {\n    src: user.imgUrl,\n    alt: firebase.auth().currentUser.name,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 81,\n      columnNumber: 12\n    }\n  }), /*#__PURE__*/React.createElement(\"div\", {\n    className: \"currentUserInfo\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 82,\n      columnNumber: 12\n    }\n  }, /*#__PURE__*/React.createElement(\"h1\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 83,\n      columnNumber: 13\n    }\n  }, user.name), /*#__PURE__*/React.createElement(\"p\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 84,\n      columnNumber: 13\n    }\n  }, user.email), /*#__PURE__*/React.createElement(\"p\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 85,\n      columnNumber: 13\n    }\n  }, \"Senast inloggad: \", /*#__PURE__*/React.createElement(TimeStamp, {\n    date: user.timestamp,\n    options: {\n      includeDay: true,\n      twentyFourHour: true\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 85,\n      columnNumber: 33\n    }\n  }), \" \")))));\n};\n\nexport default GetFromDatabase;","map":{"version":3,"sources":["/Users/jakobpersson/Documents/work/school/Teknik-for-sociala-medier/oAuth2/src/components/useDatabase/getFromDatabase.js"],"names":["React","useState","useEffect","firebase","TimeStamp","addUser","uid","email","name","imgUrl","date","Date","getTime","timestamp","Math","floor","firestore","collection","doc","get","then","exists","set","userID","GetInfoFromUser","users","setUsers","unsubscribe","where","onSnapshot","snapshot","newUsers","docs","map","id","data","updateUser","inputedUser","update","GetFromDatabase","userUid","userEmail","userName","userImg","firstRender","setFirstRender","user","auth","currentUser","includeDay","twentyFourHour"],"mappings":"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","sourcesContent":["import React, {useState, useEffect }from 'react'\nimport firebase from '../../firebase-config'\nimport TimeStamp from 'react-timestamp'\n\nfunction addUser(uid, email, name, imgUrl){\n\n    const date = new Date().getTime();\n    const timestamp = Math.floor(date/1000)\n\n    firebase\n        .firestore()\n        .collection('users').doc(uid)\n        .get().then(\n            doc => {\n                //if user exist no new user is added to the database in firestore\n            if (doc.exists) {\n                //if user not exist, the user id is set to the collection key in the database and  the timestamp and uid is saved\n            } else{\n                firebase\n                .firestore()\n                .collection('users')\n                .doc(uid).set({\n                    userID: uid,\n                    email: email,\n                    name: name,\n                    imgUrl: imgUrl,\n                    timestamp: timestamp\n\n                })\n            }\n        }\n        )\n}\n//the function gets the user information from firestore database \nfunction GetInfoFromUser(uid) {\n    const [users,setUsers] = useState([]);     \n        \n    useEffect(()=>{\n        const unsubscribe = firebase\n        .firestore()\n            .collection('users')\n            .where('userID', '==', uid)\n            .onSnapshot((snapshot)=>{\n            const newUsers = snapshot.docs.map((doc)=> ({\n                id: doc.id,\n                ...doc.data()\n            }))\n            setUsers(newUsers);\n        })\n        return () => unsubscribe()       \n    },[])\n        return users;\n}\nfunction updateUser(inputedUser){\n\n    const date = new Date().getTime();\n    const timestamp = Math.floor(date/1000)\n      //updates the timestamp in the database  fCvwAqy3yo4kpxToCY0H' \n        firebase.firestore()\n            .collection('users').doc(inputedUser)\n            .update({\n             timestamp\n            })\n      \n}\n\nconst GetFromDatabase =({userUid, userEmail, userName, userImg})=>{\n    const [firstRender, setFirstRender]= useState(true)\n    if (firstRender){\n        addUser(userUid,userEmail,userName,userImg) \n    }\n    const users = GetInfoFromUser(userUid);\n    if (firstRender){\n        updateUser(userUid)\n        setFirstRender(false)\n    }\n    return (\n      <div>\n          {users.map(user=>(\n          <div key={user.id}> \n           <img src={user.imgUrl} alt={firebase.auth().currentUser.name}/>\n           <div className=\"currentUserInfo\">\n            <h1>{user.name}</h1>\n            <p>{user.email}</p>\n            <p>Senast inloggad: <TimeStamp date={user.timestamp} options={{ includeDay: true, twentyFourHour: true }}/> </p>\n              </div>\n          </div>  \n          ))}\n      </div>\n    )\n}\nexport default GetFromDatabase"]},"metadata":{},"sourceType":"module"}