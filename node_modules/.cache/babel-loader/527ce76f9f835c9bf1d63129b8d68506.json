{"ast":null,"code":"var _jsxFileName = \"/Users/jakobpersson/Documents/work/school/Teknik-for-sociala-medier/oAuth2/src/components/useDatabase/getFromDatabase.js\";\nimport React, { useState, useEffect } from 'react';\nimport firebase from '../../firebase-config';\nimport TimeStamp from 'react-timestamp';\n\nfunction addUser(uid) {\n  const date = new Date().getTime();\n  const timestamp = Math.floor(date / 1000);\n  firebase.firestore().collection('users').doc(uid).get().then(doc => {\n    //if user exist no new user is added to the database in firestore\n    if (doc.exists) {\n      console.log('user exist'); //id user not exist\n    } else {\n      console.log('not existing');\n      firebase.firestore().collection('users').doc(uid).set({\n        userID: uid,\n        timestamp: timestamp\n      });\n    }\n  });\n} //the function gets the user information from firestore database \n\n\nfunction GetInfoFromUser(uid) {\n  const [users, setUsers] = useState([]);\n  useEffect(() => {\n    const unsubscribe = firebase.firestore().collection('users').where('userID', '==', uid).onSnapshot(snapshot => {\n      const newUsers = snapshot.docs.map(doc => ({\n        id: doc.id,\n        ...doc.data()\n      }));\n      console.log('NEW', newUsers);\n      setUsers(newUsers);\n    });\n    return () => unsubscribe();\n  }, []);\n  return users;\n}\n\nfunction updateUser(inputedUser) {\n  const date = new Date().getTime();\n  const timestamp = Math.floor(date / 1000);\n  console.log('time', timestamp); //updates the timestamp in the database  fCvwAqy3yo4kpxToCY0H' \n\n  firebase.firestore().collection('users').doc(inputedUser).update({\n    timestamp\n  });\n}\n\nconst GetFromDatabase = ({\n  userUid\n}) => {\n  const [firstRender, setFirstRender] = useState(true);\n  console.log(firstRender);\n\n  if (firstRender) {\n    addUser(userUid);\n  }\n\n  const users = GetInfoFromUser(userUid);\n\n  if (firstRender) {\n    updateUser(userUid);\n    setFirstRender(false);\n  }\n\n  return /*#__PURE__*/React.createElement(\"div\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 79,\n      columnNumber: 7\n    }\n  }, users.map(user => /*#__PURE__*/React.createElement(\"div\", {\n    key: user.id,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 81,\n      columnNumber: 11\n    }\n  }, /*#__PURE__*/React.createElement(\"p\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 83,\n      columnNumber: 15\n    }\n  }, \"Senast inloggad: \", /*#__PURE__*/React.createElement(TimeStamp, {\n    date: user.timestamp,\n    options: {\n      includeDay: true,\n      twentyFourHour: true\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 83,\n      columnNumber: 35\n    }\n  }), \" \"))));\n};\n\nexport default GetFromDatabase;","map":{"version":3,"sources":["/Users/jakobpersson/Documents/work/school/Teknik-for-sociala-medier/oAuth2/src/components/useDatabase/getFromDatabase.js"],"names":["React","useState","useEffect","firebase","TimeStamp","addUser","uid","date","Date","getTime","timestamp","Math","floor","firestore","collection","doc","get","then","exists","console","log","set","userID","GetInfoFromUser","users","setUsers","unsubscribe","where","onSnapshot","snapshot","newUsers","docs","map","id","data","updateUser","inputedUser","update","GetFromDatabase","userUid","firstRender","setFirstRender","user","includeDay","twentyFourHour"],"mappings":"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","sourcesContent":["import React, {useState, useEffect }from 'react'\nimport firebase from '../../firebase-config'\nimport TimeStamp from 'react-timestamp'\n\nfunction addUser(uid){\n    const date = new Date().getTime();\n    const timestamp = Math.floor(date/1000)\n    firebase\n        .firestore()\n        .collection('users').doc(uid)\n        .get().then(\n            doc => {\n                //if user exist no new user is added to the database in firestore\n            if (doc.exists) {\n            console.log('user exist')\n                //id user not exist\n            } else{\n                console.log('not existing')\n                firebase\n                .firestore()\n                .collection('users')\n                .doc(uid).set({\n                    userID: uid,\n                    timestamp: timestamp\n\n                })\n            }\n        }\n        )\n}\n//the function gets the user information from firestore database \nfunction GetInfoFromUser(uid) {\n    const [users,setUsers] = useState([]);     \n        \n    useEffect(()=>{\n        \n        const unsubscribe = firebase\n        .firestore()\n            .collection('users')\n            .where('userID', '==', uid)\n            .onSnapshot((snapshot)=>{\n            const newUsers = snapshot.docs.map((doc)=> ({\n                id: doc.id,\n                ...doc.data()\n            }))\n            console.log('NEW',newUsers)\n            setUsers(newUsers);\n        })\n        return () => unsubscribe()       \n    },[])\n        return users;\n}\nfunction updateUser(inputedUser){\n\n    const date = new Date().getTime();\n    const timestamp = Math.floor(date/1000)\n    console.log('time', timestamp)\n      //updates the timestamp in the database  fCvwAqy3yo4kpxToCY0H' \n        firebase.firestore()\n            .collection('users').doc(inputedUser)\n            .update({\n             timestamp\n            })\n      \n}\nconst GetFromDatabase =({userUid})=>{\n    const [firstRender, setFirstRender]= useState(true)\n\n    console.log(firstRender)\n    if (firstRender){\n        addUser(userUid) \n    }\n    const users = GetInfoFromUser(userUid);\n    if (firstRender){\n        updateUser(userUid)\n        setFirstRender(false)\n    }\n    return (\n      <div>\n          {users.map(user=>(\n          <div key={user.id}> \n              \n              <p>Senast inloggad: <TimeStamp date={user.timestamp} options={{ includeDay: true, twentyFourHour: true }}/> </p>\n              \n          </div>  \n          ))}\n      </div>\n    )\n}\nexport default GetFromDatabase"]},"metadata":{},"sourceType":"module"}